// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.textanalytics.implementation;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.experimental.http.DynamicRequest;
import com.azure.core.http.HttpMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.util.serializer.ObjectSerializer;
import java.util.UUID;

/**
 * Initializes a new instance of the TextAnalyticsClient type.
 */
@ServiceClient(builder = TextAnalyticsClientBuilder.class)
public final class TextAnalyticsClient {
    private final String endpoint;

    private final HttpPipeline pipeline;

    private final ObjectSerializer objectSerializer;

    /**
     * Initializes an instance of TextAnalyticsClient client.
     * 
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
     * @param pipeline The HTTP pipeline to send requests through.
     * @param objectSerializer The serializer to serialize an object into a string.
     */
    TextAnalyticsClient(String endpoint, HttpPipeline pipeline, ObjectSerializer objectSerializer) {
        this.endpoint = endpoint;
        this.pipeline = pipeline;
        this.objectSerializer = objectSerializer;
    }

    /**
     * Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     analysisInput: {
     *         documents: [
     *             {
     *                 id: String
     *                 text: String
     *                 language: String
     *             }
     *         ]
     *     }
     *     tasks: {
     *         entityRecognitionTasks: [
     *             {
     *                 parameters: {
     *                     modelVersion: String
     *                     stringIndexType: String(TextElements_v8/UnicodeCodePoint/Utf16CodeUnit)
     *                 }
     *             }
     *         ]
     *         entityRecognitionPiiTasks: [
     *             {
     *                 parameters: {
     *                     domain: String(phi/none)
     *                     modelVersion: String
     *                     stringIndexType: String(TextElements_v8/UnicodeCodePoint/Utf16CodeUnit)
     *                 }
     *             }
     *         ]
     *         keyPhraseExtractionTasks: [
     *             {
     *                 parameters: {
     *                     modelVersion: String
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param accept the String value.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest analyzeWithResponseAsync(String accept) {
        return new DynamicRequest(objectSerializer, pipeline)
            .setUrl("{Endpoint}/text/analytics/v3.1-preview.3/analyze")
            .setHttpMethod(HttpMethod.POST)
            .setPathParam("Endpoint", endpoint)
            .addHeader("Accept", accept)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json;q=0.9");
    }

    /**
     * Get the status of an analysis job.  A job may consist of one or more tasks.  Once all tasks are completed, the job will transition to the completed state and results will be available for each task.
     * <p><strong>Optional Query Parameters</strong></p>
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>showStats</td><td>Boolean</td><td>the Boolean value</td></tr>
     *     <tr><td>top</td><td>Integer</td><td>the Integer value</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>the Integer value</td></tr>
     * </table>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     errors: [
     *         {
     *             code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/NotFound)
     *             message: String
     *             target: String
     *             innererror: {
     *                 code: String(InvalidParameterValue/InvalidRequestBodyFormat/EmptyRequest/MissingInputRecords/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint)
     *                 message: String
     *                 details: {
     *                     String: String
     *                 }
     *                 target: String
     *                 innererror: InnerError
     *             }
     *             details: [
     *                 TextAnalyticsError
     *             ]
     *         }
     *     ]
     *     statistics: {
     *         documentsCount: int
     *         validDocumentsCount: int
     *         erroneousDocumentsCount: int
     *         transactionsCount: long
     *     }
     *     tasks: {
     *         details: {
     *         }
     *         completed: int
     *         failed: int
     *         inProgress: int
     *         total: int
     *         entityRecognitionTasks: [
     *             {
     *                 results: {
     *                     documents: [
     *                         {
     *                             id: String
     *                             entities: [
     *                                 {
     *                                     text: String
     *                                     category: String
     *                                     subcategory: String
     *                                     offset: int
     *                                     length: int
     *                                     confidenceScore: double
     *                                 }
     *                             ]
     *                             warnings: [
     *                                 {
     *                                     code: String(LongWordsInDocument/DocumentTruncated)
     *                                     message: String
     *                                     targetRef: String
     *                                 }
     *                             ]
     *                             statistics: {
     *                                 charactersCount: int
     *                                 transactionsCount: int
     *                             }
     *                         }
     *                     ]
     *                     errors: [
     *                         {
     *                             id: String
     *                             error: TextAnalyticsError
     *                         }
     *                     ]
     *                     statistics: RequestStatistics
     *                     modelVersion: String
     *                 }
     *             }
     *         ]
     *         entityRecognitionPiiTasks: [
     *             {
     *                 results: {
     *                     documents: [
     *                         {
     *                             id: String
     *                             redactedText: String
     *                             entities: [
     *                                 Entity
     *                             ]
     *                             warnings: [
     *                                 TextAnalyticsWarning
     *                             ]
     *                             statistics: DocumentStatistics
     *                         }
     *                     ]
     *                     errors: [
     *                         DocumentError
     *                     ]
     *                     statistics: RequestStatistics
     *                     modelVersion: String
     *                 }
     *             }
     *         ]
     *         keyPhraseExtractionTasks: [
     *             {
     *                 results: {
     *                     documents: [
     *                         {
     *                             id: String
     *                             keyPhrases: [
     *                                 String
     *                             ]
     *                             warnings: [
     *                                 TextAnalyticsWarning
     *                             ]
     *                             statistics: DocumentStatistics
     *                         }
     *                     ]
     *                     errors: [
     *                         DocumentError
     *                     ]
     *                     statistics: RequestStatistics
     *                     modelVersion: String
     *                 }
     *             }
     *         ]
     *     }
     *     nextLink: String
     * }
     * }</pre>
     * 
     * @param jobId the String value.
     * @param accept the String value.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest analyzeStatusWithResponseAsync(String jobId, String accept) {
        return new DynamicRequest(objectSerializer, pipeline)
            .setUrl("{Endpoint}/text/analytics/v3.1-preview.3/analyze/jobs/{jobId}")
            .setHttpMethod(HttpMethod.GET)
            .setPathParam("Endpoint", endpoint)
            .setPathParam("jobId", jobId)
            .addHeader("Accept", accept)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json, text/json");
    }

    /**
     * Get details of the healthcare prediction job specified by the jobId.
     * <p><strong>Optional Query Parameters</strong></p>
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>top</td><td>Integer</td><td>the Integer value</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>the Integer value</td></tr>
     *     <tr><td>showStats</td><td>Boolean</td><td>the Boolean value</td></tr>
     * </table>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     results: {
     *         documents: [
     *             {
     *                 id: String
     *                 entities: [
     *                     {
     *                         isNegated: boolean
     *                         links: [
     *                             {
     *                                 dataSource: String
     *                                 id: String
     *                             }
     *                         ]
     *                     }
     *                 ]
     *                 relations: [
     *                     {
     *                         relationType: String
     *                         bidirectional: boolean
     *                         source: String
     *                         target: String
     *                     }
     *                 ]
     *                 warnings: [
     *                     {
     *                         code: String(LongWordsInDocument/DocumentTruncated)
     *                         message: String
     *                         targetRef: String
     *                     }
     *                 ]
     *                 statistics: {
     *                     charactersCount: int
     *                     transactionsCount: int
     *                 }
     *             }
     *         ]
     *         errors: [
     *             {
     *                 id: String
     *                 error: {
     *                     code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/NotFound)
     *                     message: String
     *                     target: String
     *                     innererror: {
     *                         code: String(InvalidParameterValue/InvalidRequestBodyFormat/EmptyRequest/MissingInputRecords/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint)
     *                         message: String
     *                         details: {
     *                             String: String
     *                         }
     *                         target: String
     *                         innererror: InnerError
     *                     }
     *                     details: [
     *                         TextAnalyticsError
     *                     ]
     *                 }
     *             }
     *         ]
     *         statistics: {
     *             documentsCount: int
     *             validDocumentsCount: int
     *             erroneousDocumentsCount: int
     *             transactionsCount: long
     *         }
     *         modelVersion: String
     *     }
     *     errors: [
     *         TextAnalyticsError
     *     ]
     *     nextLink: String
     * }
     * }</pre>
     * 
     * @param jobId the UUID value.
     * @param accept the String value.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest healthStatusWithResponseAsync(UUID jobId, String accept) {
        return new DynamicRequest(objectSerializer, pipeline)
            .setUrl("{Endpoint}/text/analytics/v3.1-preview.3/entities/health/jobs/{jobId}")
            .setHttpMethod(HttpMethod.GET)
            .setPathParam("Endpoint", endpoint)
            .setPathParam("jobId", String.valueOf(jobId))
            .addHeader("Accept", accept)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json, text/json");
    }

    /**
     * Cancel healthcare prediction job.
     * 
     * @param jobId the UUID value.
     * @param accept the String value.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest cancelHealthJobWithResponseAsync(UUID jobId, String accept) {
        return new DynamicRequest(objectSerializer, pipeline)
            .setUrl("{Endpoint}/text/analytics/v3.1-preview.3/entities/health/jobs/{jobId}")
            .setHttpMethod(HttpMethod.DELETE)
            .setPathParam("Endpoint", endpoint)
            .setPathParam("jobId", String.valueOf(jobId))
            .addHeader("Accept", accept)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json;q=0.9");
    }

    /**
     * Start a healthcare analysis job to recognize healthcare related entities (drugs, conditions, symptoms, etc) and their relations.
     * <p><strong>Optional Query Parameters</strong></p>
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>modelVersion</td><td>String</td><td>the String value</td></tr>
     *     <tr><td>stringIndexType</td><td>StringIndexType</td><td>the StringIndexType value</td></tr>
     * </table>
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             text: String
     *             language: String
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param accept the String value.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest healthWithResponseAsync(String accept) {
        return new DynamicRequest(objectSerializer, pipeline)
            .setUrl("{Endpoint}/text/analytics/v3.1-preview.3/entities/health/jobs")
            .setHttpMethod(HttpMethod.POST)
            .setPathParam("Endpoint", endpoint)
            .addHeader("Accept", accept)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json;q=0.9");
    }

    /**
     * The API returns a list of general named entities in a given document. For the list of supported entity types, check &lt;a href="https://aka.ms/taner"&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href="https://aka.ms/talangs"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * <p><strong>Optional Query Parameters</strong></p>
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>modelVersion</td><td>String</td><td>the String value</td></tr>
     *     <tr><td>showStats</td><td>Boolean</td><td>the Boolean value</td></tr>
     *     <tr><td>stringIndexType</td><td>StringIndexType</td><td>the StringIndexType value</td></tr>
     * </table>
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             text: String
     *             language: String
     *         }
     *     ]
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             entities: [
     *                 {
     *                     text: String
     *                     category: String
     *                     subcategory: String
     *                     offset: int
     *                     length: int
     *                     confidenceScore: double
     *                 }
     *             ]
     *             warnings: [
     *                 {
     *                     code: String(LongWordsInDocument/DocumentTruncated)
     *                     message: String
     *                     targetRef: String
     *                 }
     *             ]
     *             statistics: {
     *                 charactersCount: int
     *                 transactionsCount: int
     *             }
     *         }
     *     ]
     *     errors: [
     *         {
     *             id: String
     *             error: {
     *                 code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/NotFound)
     *                 message: String
     *                 target: String
     *                 innererror: {
     *                     code: String(InvalidParameterValue/InvalidRequestBodyFormat/EmptyRequest/MissingInputRecords/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint)
     *                     message: String
     *                     details: {
     *                         String: String
     *                     }
     *                     target: String
     *                     innererror: InnerError
     *                 }
     *                 details: [
     *                     TextAnalyticsError
     *                 ]
     *             }
     *         }
     *     ]
     *     statistics: {
     *         documentsCount: int
     *         validDocumentsCount: int
     *         erroneousDocumentsCount: int
     *         transactionsCount: long
     *     }
     *     modelVersion: String
     * }
     * }</pre>
     * 
     * @param accept the String value.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest entitiesRecognitionGeneralWithResponseAsync(String accept) {
        return new DynamicRequest(objectSerializer, pipeline)
            .setUrl("{Endpoint}/text/analytics/v3.1-preview.3/entities/recognition/general")
            .setHttpMethod(HttpMethod.POST)
            .setPathParam("Endpoint", endpoint)
            .addHeader("Accept", accept)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json, text/json");
    }

    /**
     * The API returns a list of entities with personal information (\"SSN\", \"Bank Account\" etc) in the document. For the list of supported entity types, check &lt;a href="https://aka.ms/tanerpii"&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href="https://aka.ms/talangs"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * <p><strong>Optional Query Parameters</strong></p>
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>modelVersion</td><td>String</td><td>the String value</td></tr>
     *     <tr><td>showStats</td><td>Boolean</td><td>the Boolean value</td></tr>
     *     <tr><td>domain</td><td>String</td><td>the String value</td></tr>
     *     <tr><td>stringIndexType</td><td>StringIndexType</td><td>the StringIndexType value</td></tr>
     * </table>
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             text: String
     *             language: String
     *         }
     *     ]
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             redactedText: String
     *             entities: [
     *                 {
     *                     text: String
     *                     category: String
     *                     subcategory: String
     *                     offset: int
     *                     length: int
     *                     confidenceScore: double
     *                 }
     *             ]
     *             warnings: [
     *                 {
     *                     code: String(LongWordsInDocument/DocumentTruncated)
     *                     message: String
     *                     targetRef: String
     *                 }
     *             ]
     *             statistics: {
     *                 charactersCount: int
     *                 transactionsCount: int
     *             }
     *         }
     *     ]
     *     errors: [
     *         {
     *             id: String
     *             error: {
     *                 code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/NotFound)
     *                 message: String
     *                 target: String
     *                 innererror: {
     *                     code: String(InvalidParameterValue/InvalidRequestBodyFormat/EmptyRequest/MissingInputRecords/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint)
     *                     message: String
     *                     details: {
     *                         String: String
     *                     }
     *                     target: String
     *                     innererror: InnerError
     *                 }
     *                 details: [
     *                     TextAnalyticsError
     *                 ]
     *             }
     *         }
     *     ]
     *     statistics: {
     *         documentsCount: int
     *         validDocumentsCount: int
     *         erroneousDocumentsCount: int
     *         transactionsCount: long
     *     }
     *     modelVersion: String
     * }
     * }</pre>
     * 
     * @param accept the String value.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest entitiesRecognitionPiiWithResponseAsync(String accept) {
        return new DynamicRequest(objectSerializer, pipeline)
            .setUrl("{Endpoint}/text/analytics/v3.1-preview.3/entities/recognition/pii")
            .setHttpMethod(HttpMethod.POST)
            .setPathParam("Endpoint", endpoint)
            .addHeader("Accept", accept)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json, text/json");
    }

    /**
     * The API returns a list of recognized entities with links to a well-known knowledge base. See the &lt;a href="https://aka.ms/talangs"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * <p><strong>Optional Query Parameters</strong></p>
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>modelVersion</td><td>String</td><td>the String value</td></tr>
     *     <tr><td>showStats</td><td>Boolean</td><td>the Boolean value</td></tr>
     *     <tr><td>stringIndexType</td><td>StringIndexType</td><td>the StringIndexType value</td></tr>
     * </table>
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             text: String
     *             language: String
     *         }
     *     ]
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             entities: [
     *                 {
     *                     name: String
     *                     matches: [
     *                         {
     *                             confidenceScore: double
     *                             text: String
     *                             offset: int
     *                             length: int
     *                         }
     *                     ]
     *                     language: String
     *                     id: String
     *                     url: String
     *                     dataSource: String
     *                     bingId: String
     *                 }
     *             ]
     *             warnings: [
     *                 {
     *                     code: String(LongWordsInDocument/DocumentTruncated)
     *                     message: String
     *                     targetRef: String
     *                 }
     *             ]
     *             statistics: {
     *                 charactersCount: int
     *                 transactionsCount: int
     *             }
     *         }
     *     ]
     *     errors: [
     *         {
     *             id: String
     *             error: {
     *                 code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/NotFound)
     *                 message: String
     *                 target: String
     *                 innererror: {
     *                     code: String(InvalidParameterValue/InvalidRequestBodyFormat/EmptyRequest/MissingInputRecords/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint)
     *                     message: String
     *                     details: {
     *                         String: String
     *                     }
     *                     target: String
     *                     innererror: InnerError
     *                 }
     *                 details: [
     *                     TextAnalyticsError
     *                 ]
     *             }
     *         }
     *     ]
     *     statistics: {
     *         documentsCount: int
     *         validDocumentsCount: int
     *         erroneousDocumentsCount: int
     *         transactionsCount: long
     *     }
     *     modelVersion: String
     * }
     * }</pre>
     * 
     * @param accept the String value.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest entitiesLinkingWithResponseAsync(String accept) {
        return new DynamicRequest(objectSerializer, pipeline)
            .setUrl("{Endpoint}/text/analytics/v3.1-preview.3/entities/linking")
            .setHttpMethod(HttpMethod.POST)
            .setPathParam("Endpoint", endpoint)
            .addHeader("Accept", accept)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json, text/json");
    }

    /**
     * The API returns a list of strings denoting the key phrases in the input text. See the &lt;a href="https://aka.ms/talangs"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * <p><strong>Optional Query Parameters</strong></p>
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>modelVersion</td><td>String</td><td>the String value</td></tr>
     *     <tr><td>showStats</td><td>Boolean</td><td>the Boolean value</td></tr>
     * </table>
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             text: String
     *             language: String
     *         }
     *     ]
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             keyPhrases: [
     *                 String
     *             ]
     *             warnings: [
     *                 {
     *                     code: String(LongWordsInDocument/DocumentTruncated)
     *                     message: String
     *                     targetRef: String
     *                 }
     *             ]
     *             statistics: {
     *                 charactersCount: int
     *                 transactionsCount: int
     *             }
     *         }
     *     ]
     *     errors: [
     *         {
     *             id: String
     *             error: {
     *                 code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/NotFound)
     *                 message: String
     *                 target: String
     *                 innererror: {
     *                     code: String(InvalidParameterValue/InvalidRequestBodyFormat/EmptyRequest/MissingInputRecords/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint)
     *                     message: String
     *                     details: {
     *                         String: String
     *                     }
     *                     target: String
     *                     innererror: InnerError
     *                 }
     *                 details: [
     *                     TextAnalyticsError
     *                 ]
     *             }
     *         }
     *     ]
     *     statistics: {
     *         documentsCount: int
     *         validDocumentsCount: int
     *         erroneousDocumentsCount: int
     *         transactionsCount: long
     *     }
     *     modelVersion: String
     * }
     * }</pre>
     * 
     * @param accept the String value.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest keyPhrasesWithResponseAsync(String accept) {
        return new DynamicRequest(objectSerializer, pipeline)
            .setUrl("{Endpoint}/text/analytics/v3.1-preview.3/keyPhrases")
            .setHttpMethod(HttpMethod.POST)
            .setPathParam("Endpoint", endpoint)
            .addHeader("Accept", accept)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json, text/json");
    }

    /**
     * The API returns the detected language and a numeric score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. See the &lt;a href="https://aka.ms/talangs"&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * <p><strong>Optional Query Parameters</strong></p>
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>modelVersion</td><td>String</td><td>the String value</td></tr>
     *     <tr><td>showStats</td><td>Boolean</td><td>the Boolean value</td></tr>
     * </table>
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             text: String
     *             countryHint: String
     *         }
     *     ]
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             detectedLanguage: {
     *                 name: String
     *                 iso6391Name: String
     *                 confidenceScore: double
     *             }
     *             warnings: [
     *                 {
     *                     code: String(LongWordsInDocument/DocumentTruncated)
     *                     message: String
     *                     targetRef: String
     *                 }
     *             ]
     *             statistics: {
     *                 charactersCount: int
     *                 transactionsCount: int
     *             }
     *         }
     *     ]
     *     errors: [
     *         {
     *             id: String
     *             error: {
     *                 code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/NotFound)
     *                 message: String
     *                 target: String
     *                 innererror: {
     *                     code: String(InvalidParameterValue/InvalidRequestBodyFormat/EmptyRequest/MissingInputRecords/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint)
     *                     message: String
     *                     details: {
     *                         String: String
     *                     }
     *                     target: String
     *                     innererror: InnerError
     *                 }
     *                 details: [
     *                     TextAnalyticsError
     *                 ]
     *             }
     *         }
     *     ]
     *     statistics: {
     *         documentsCount: int
     *         validDocumentsCount: int
     *         erroneousDocumentsCount: int
     *         transactionsCount: long
     *     }
     *     modelVersion: String
     * }
     * }</pre>
     * 
     * @param accept the String value.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest languagesWithResponseAsync(String accept) {
        return new DynamicRequest(objectSerializer, pipeline)
            .setUrl("{Endpoint}/text/analytics/v3.1-preview.3/languages")
            .setHttpMethod(HttpMethod.POST)
            .setPathParam("Endpoint", endpoint)
            .addHeader("Accept", accept)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json, text/json");
    }

    /**
     * The API returns a detailed sentiment analysis for the input text. The analysis is done in multiple levels of granularity, start from the a document level, down to sentence and key terms (aspects) and opinions.
     * <p><strong>Optional Query Parameters</strong></p>
     * <table border="1">
     *     <caption>Optional Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>
     *     <tr><td>modelVersion</td><td>String</td><td>the String value</td></tr>
     *     <tr><td>showStats</td><td>Boolean</td><td>the Boolean value</td></tr>
     *     <tr><td>opinionMining</td><td>Boolean</td><td>the Boolean value</td></tr>
     *     <tr><td>stringIndexType</td><td>StringIndexType</td><td>the StringIndexType value</td></tr>
     * </table>
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             text: String
     *             language: String
     *         }
     *     ]
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     documents: [
     *         {
     *             id: String
     *             sentiment: String(positive/neutral/negative/mixed)
     *             statistics: {
     *                 charactersCount: int
     *                 transactionsCount: int
     *             }
     *             confidenceScores: {
     *                 positive: double
     *                 neutral: double
     *                 negative: double
     *             }
     *             sentences: [
     *                 {
     *                     text: String
     *                     sentiment: String(positive/neutral/negative)
     *                     confidenceScores: SentimentConfidenceScorePerLabel
     *                     offset: int
     *                     length: int
     *                     aspects: [
     *                         {
     *                             sentiment: String(positive/mixed/negative)
     *                             confidenceScores: {
     *                                 positive: double
     *                                 negative: double
     *                             }
     *                             offset: int
     *                             length: int
     *                             text: String
     *                             relations: [
     *                                 {
     *                                     relationType: String(opinion/aspect)
     *                                     ref: String
     *                                 }
     *                             ]
     *                         }
     *                     ]
     *                     opinions: [
     *                         {
     *                             sentiment: String(positive/mixed/negative)
     *                             confidenceScores: AspectConfidenceScoreLabel
     *                             offset: int
     *                             length: int
     *                             text: String
     *                             isNegated: boolean
     *                         }
     *                     ]
     *                 }
     *             ]
     *             warnings: [
     *                 {
     *                     code: String(LongWordsInDocument/DocumentTruncated)
     *                     message: String
     *                     targetRef: String
     *                 }
     *             ]
     *         }
     *     ]
     *     errors: [
     *         {
     *             id: String
     *             error: {
     *                 code: String(InvalidRequest/InvalidArgument/InternalServerError/ServiceUnavailable/NotFound)
     *                 message: String
     *                 target: String
     *                 innererror: {
     *                     code: String(InvalidParameterValue/InvalidRequestBodyFormat/EmptyRequest/MissingInputRecords/InvalidDocument/ModelVersionIncorrect/InvalidDocumentBatch/UnsupportedLanguageCode/InvalidCountryHint)
     *                     message: String
     *                     details: {
     *                         String: String
     *                     }
     *                     target: String
     *                     innererror: InnerError
     *                 }
     *                 details: [
     *                     TextAnalyticsError
     *                 ]
     *             }
     *         }
     *     ]
     *     statistics: {
     *         documentsCount: int
     *         validDocumentsCount: int
     *         erroneousDocumentsCount: int
     *         transactionsCount: long
     *     }
     *     modelVersion: String
     * }
     * }</pre>
     * 
     * @param accept the String value.
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DynamicRequest sentimentWithResponseAsync(String accept) {
        return new DynamicRequest(objectSerializer, pipeline)
            .setUrl("{Endpoint}/text/analytics/v3.1-preview.3/sentiment")
            .setHttpMethod(HttpMethod.POST)
            .setPathParam("Endpoint", endpoint)
            .addHeader("Accept", accept)
            .addHeader("Content-Type", "application/json")
            .addHeader("Accept", "application/json, text/json");
    }
}
